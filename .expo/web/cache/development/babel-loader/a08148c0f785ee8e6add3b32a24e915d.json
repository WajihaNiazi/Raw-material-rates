{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\contactList\\\\screens\\\\searchScreen.js\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Colors from \"../utils/colors\";\nimport * as SQLite from \"expo-sqlite\";\nimport ContactListItem from \"../components/contactListItem\";\nvar db = SQLite.openDatabase('contacts.db');\nexport default function SearchScreen() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      allContacts = _useState2[0],\n      setAllContacts = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      filteredContacts = _useState4[0],\n      setFilteredContacts = _useState4[1];\n\n  useEffect(function () {\n    db.transaction(function (tx) {\n      tx.executeSql('select * from contact', [], function (tx, _ref) {\n        var rows = _ref.rows;\n        var data = [];\n\n        for (var i = 0; i < rows.length; i++) {\n          data.push(rows[i]);\n        }\n\n        setAllContacts(data);\n      });\n    });\n  });\n\n  var searchContacts = function searchContacts(text) {\n    var filtertext = text.toLowerCase();\n    var newContacts = allContacts.filter(function (contact) {\n      var item = contact.name.toLowerCase();\n      return item.indexOf(filterText) > -1;\n    });\n    setFilteredContacts(newContacts);\n\n    if (text.length < 1) {\n      setFilteredContacts([]);\n    }\n  };\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.searchContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }, React.createElement(TextInput, {\n    placeholder: \"Search....\",\n    style: styles.searchInput,\n    onChangeText: function onChangeText(text) {\n      return searchContacts(text);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }\n  })), filteredContacts.length > 0 ? React.createElement(FlatList, {\n    data: filteredContacts,\n    keyExtractor: function keyExtractor(item) {\n      item.id;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(ContactListItem, {\n        name: item.name,\n        phone: item.phone,\n        onPress: function onPress() {\n          return navigation.navigate('Profile', {\n            item: item\n          });\n        },\n        onDeleteContact: function onDeleteContact() {\n          deleteContact(item.id);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 28\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 43\n    }\n  }) : React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 18\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 24\n    }\n  }, \"Noting to display\")));\n}\nvar styles = StyleSheet.create({\n  searchContainer: {\n    backgroundColor: Colors.secondary\n  },\n  searchInput: {\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    margin: 20,\n    backgroundColor: Colors.white,\n    borderRadius: 10\n  }\n});","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/contactList/screens/searchScreen.js"],"names":["React","useState","useEffect","Colors","SQLite","ContactListItem","db","openDatabase","SearchScreen","allContacts","setAllContacts","filteredContacts","setFilteredContacts","transaction","tx","executeSql","rows","data","i","length","push","searchContacts","text","filtertext","toLowerCase","newContacts","filter","contact","item","name","indexOf","filterText","styles","searchContainer","searchInput","id","phone","navigation","navigate","deleteContact","StyleSheet","create","backgroundColor","secondary","paddingHorizontal","paddingVertical","margin","white","borderRadius"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\r\nimport {\r\n    View,\r\n    Text,\r\n    TextInput,\r\n    TouchableOpacity,\r\n    StyleSheet,\r\n    FlatList\r\n} from 'react-native';\r\nimport Colors from '../utils/colors';\r\nimport * as SQLite from \"expo-sqlite\";\r\nimport ContactListItem from \"../components/contactListItem\";\r\nconst db = SQLite.openDatabase('contacts.db');\r\n\r\nexport default function SearchScreen(){\r\n    const [allContacts,setAllContacts] = useState([]);\r\n    const [filteredContacts,setFilteredContacts] = useState([]);\r\n    useEffect(()=>{\r\n        db.transaction(tx =>{\r\n            tx.executeSql('select * from contact',[],(tx,{rows})=>{\r\n                var data = [];\r\n                for (let i = 0; i < rows.length; i++) {\r\n                    data.push(rows[i]);\r\n                }\r\n                setAllContacts(data);\r\n            })\r\n        })\r\n    })\r\n    const searchContacts = (text)=>{\r\n        const filtertext= text.toLowerCase()\r\n        const newContacts = allContacts.filter((contact)=>{\r\n            const item = contact.name.toLowerCase();\r\n            return item.indexOf(filterText) > -1\r\n        })\r\n        setFilteredContacts(newContacts);\r\n        if (text.length <1) {\r\n            setFilteredContacts([])\r\n        }\r\n    }\r\n    return (\r\n        <View>\r\n            <View  style={styles.searchContainer}>\r\n            <TextInput placeholder=\"Search....\" style={styles.searchInput} onChangeText={(text)=> searchContacts(text)}/>\r\n            </View>\r\n            {filteredContacts.length >0 ? <FlatList \r\n                data={filteredContacts}\r\n                keyExtractor={(item)=>{item.id}}\r\n                renderItem={({item}) =>{\r\n                    return <ContactListItem name={item.name} phone={item.phone }  onPress={()=> navigation.navigate('Profile',{item:item})} onDeleteContact={()=>{deleteContact(item.id)}}/>\r\n                }}\r\n            /> : <View><Text>Noting to display</Text></View>}\r\n        </View>\r\n    )\r\n\r\n}\r\nconst styles =StyleSheet.create({\r\n   searchContainer:{\r\n       backgroundColor:Colors.secondary,\r\n   },\r\n   searchInput:{\r\n       paddingHorizontal:20,\r\n       paddingVertical:10,\r\n       margin:20,\r\n       backgroundColor:Colors.white,\r\n       borderRadius:10\r\n   }\r\n   \r\n})"]},"metadata":{},"sourceType":"module"}